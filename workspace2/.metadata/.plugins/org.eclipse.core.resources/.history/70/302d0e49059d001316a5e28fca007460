package com.test1.models;

/*
 * Expects a cassandra columnfamily defined as
 * use keyspace2;
	CREATE TABLE keyspace2.tweets (
		user varchar,
		tweet varchar,
		timeuuid timeuuid,
		PRIMARY KEY (user,timeuuid)
	) WITH CLUSTERING ORDER BY (timeuuid DESC);
 * 
 */

import java.util.LinkedList;

import com.datastax.driver.core.BoundStatement;
import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;

import com.test1.lib.*;
import com.test1.stores.TweetStore;

public class TweetModel {
	Cluster cluster;
	public TweetModel(){
		
	}

	public void setCluster(Cluster cluster){
		this.cluster=cluster;
	}
	
	public LinkedList<TweetStore> getTweets(String subscribed) {
		LinkedList<TweetStore> tweetList = new LinkedList<TweetStore>();
		Session session = cluster.connect("keyspace2");

		String query = "";
		if ( subscribed.isEmpty() ) {
			query = "SELECT * from tweets";
		} else {
			query = "SELECT * from tweets WHERE user IN ("+subscribed.replaceAll("\"", "'")+") ALLOW FILTERING";
		}
		System.out.print(query);
		PreparedStatement statement = session.prepare(query);
		BoundStatement boundStatement = new BoundStatement(statement);
		ResultSet rs = session.execute(boundStatement);
		if (rs.isExhausted()) {
			System.out.println("No Tweets returned");
		} else {
			for (Row row : rs) {
				TweetStore ts = new TweetStore();
				ts.setTweet(row.getString("tweet"));
				ts.setUser(row.getString("user"));
				ts.setTimeuuid(row.getUUID("timeuuid"));
				tweetList.add(ts);
			}
		}
		session.close();
		return tweetList;
	}
	
	public LinkedList<TweetStore> getTweets(String from, String subscribed) {
		LinkedList<TweetStore> tweetList = new LinkedList<TweetStore>();
		Session session = cluster.connect("keyspace2");

		String query = "";
		if ( subscribed.isEmpty() ) {
			query = "SELECT * from tweets WHERE timeuuid > "+from.toString()+" ALLOW FILTERING";
		} else {
			query = "SELECT * from tweets WHERE timeuuid > "+from.toString()+" AND user IN ("+subscribed.replaceAll("\"", "'")+") ALLOW FILTERING";
		}
		System.out.print(query);
		PreparedStatement statement = session.prepare(query);
		BoundStatement boundStatement = new BoundStatement(statement);
		ResultSet rs = session.execute(boundStatement);
		if (rs.isExhausted()) {
			System.out.println("No Tweets returned");
		} else {
			for (Row row : rs) {
				TweetStore ts = new TweetStore();
				ts.setTweet(row.getString("tweet"));
				ts.setUser(row.getString("user"));
				ts.setTimeuuid(row.getUUID("timeuuid"));
				tweetList.add(ts);
			}
		}
		session.close();
		return tweetList;
	}
	
	public boolean saveTweet(TweetStore ts){
		
		Session session = cluster.connect("keyspace2");

		String query = ""
		+ "INSERT INTO tweets (user,tweet,timeuuid) "
		+ "VALUES ('"+ts.getUser()+"','"+ts.getTweet().replaceAll("'", "").replaceAll("\"", "")+"',NOW()) ";
		PreparedStatement statement = session.prepare(query);		
		BoundStatement boundStatement = new BoundStatement(statement);
		
		try {
		
			ResultSet rs = session.execute(boundStatement);
			System.out.println("Success!");
			return true;
				
		} catch ( Exception e ) {
			System.out.println("Failure!!");
			e.printStackTrace();
			
		}
		return false;
	}
}
